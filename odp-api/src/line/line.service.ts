import { Injectable, Logger } from '@nestjs/common';
import axios from 'axios';
import { PersonRepository } from '../person/infrastructure/repositories/person.repository';
import { MemberRepository } from '../member/infrastructure/repositories/member.repository';

@Injectable()
export class LineService {
  private readonly REPLY_ENDPOINT = 'https://api.line.me/v2/bot/message/reply';
  private readonly PUSH_ENDPOINT = 'https://api.line.me/v2/bot/message/push';
  private readonly CHANNEL_ACCESS_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN;
  private readonly logger = new Logger(LineService.name);

  constructor(
    private readonly personRepository: PersonRepository,
    private readonly memberRepository: MemberRepository
  ) {
    if (!this.CHANNEL_ACCESS_TOKEN) {
      this.logger.error('LINE_CHANNEL_ACCESS_TOKEN is not configured');
    }
  }

  async handleEvents(events: any[]): Promise<{ status: string; message?: string }> {
    if (!this.CHANNEL_ACCESS_TOKEN) {
      this.logger.error('LINE_CHANNEL_ACCESS_TOKEN is not configured');
      return { status: 'error', message: 'LINE_CHANNEL_ACCESS_TOKEN is not configured' };
    }

    try {
      for (const event of events) {
        await this.processEvent(event);
      }
      return { status: 'ok' };
    } catch (error) {
      this.logger.error('Error handling LINE events:', error instanceof Error ? error.message : 'Unknown error');
      return { status: 'error', message: error instanceof Error ? error.message : 'Unknown error' };
    }
  }

  private async processEvent(event: any): Promise<void> {
    if (event.type === 'message' && event.message.type === 'text') {
      const replyToken = event.replyToken;
      const userMessage = event.message.text.trim();
      const userId = event.source.userId;

      this.logger.log(`Received message from ${userId}: ${userMessage}`);

      // ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (userMessage.includes(' ')) {
        await this.handleNameSearch(replyToken, userMessage);
      } else {
        // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        await this.handleOtherMessage(replyToken, userMessage);
      }
    } else if (event.type === 'follow') {
      // User follows the bot
      await this.handleFollow(event.replyToken);
    } else if (event.type === 'unfollow') {
      // User unfollows the bot
      this.logger.log(`User ${event.source.userId} unfollowed the bot`);
    }
  }

  private async handleNameSearch(replyToken: string, message: string): Promise<void> {
    const [name, ...surnameParts] = message.split(' ');
    const surname = surnameParts.join(' ');
    
    try {
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Person
      const persons = await this.personRepository.findByNameAndSurname(name, surname);
      
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á Member ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ contactPerson
      const members = await this.memberRepository.findByContactPersonName(name, surname);
      
      let responseMessage = '';
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Person
      if (persons.length > 0) {
        const personDetails = persons.map(p => 
          `ÔøΩ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n` +
          `ÔøΩ ‡∏ä‡∏∑‡πà‡∏≠: ${p.name} ${p.surname}\n` +
          `ÔøΩ ‡∏£‡∏´‡∏±‡∏™: ${p.n_id || '-'}\n` +
          `ÔøΩüéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${p.dob || '-'}\n` +
          `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${p.phone || '-'}\n` +
          `üåç ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏¥: ${p.nationality || '-'}\n` +
          `üèõÔ∏è ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏ä‡∏≤‡∏ï‡∏¥: ${p.citizen || '-'}\n` +
          `üôè ‡∏®‡∏≤‡∏™‡∏ô‡∏≤: ${p.religion || '-'}\n` +
          `üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${p.address || '-'}`
        ).join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n');
        
        responseMessage += `üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ${persons.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n${personDetails}`;
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Member
      if (members.length > 0) {
        if (responseMessage) responseMessage += '\n\n';
        
        const memberDetails = members.map(m => 
          `üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n` +
          `üìù ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${m.memberid || '-'}\n` +
          `üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${m.idCard || '-'}\n` +
          `üè¢ ‡∏≠‡∏á‡∏Ñ‡πå‡∏Å‡∏£: ${m.organization || '-'}\n` +
          `üë§ ‡∏ú‡∏π‡πâ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${m.contactPerson || '-'}\n` +
          `üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${m.contactPhone || '-'}`
        ).join('\n\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n');
        
        responseMessage += `üîç ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${members.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n\n${memberDetails}`;
      }
      
      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      if (persons.length === 0 && members.length === 0) {
        responseMessage = '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á\n\nüí° ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á:\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å';
      }
      
      await this.replyMessage(replyToken, responseMessage);
      
    } catch (error) {
      this.logger.error('Error searching person/member:', error instanceof Error ? error.message : 'Unknown error');
      await this.replyMessage(replyToken, '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  }

  private async handleOtherMessage(replyToken: string, message: string): Promise<void> {
    if (message.toLowerCase() === 'help' || message === '‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠') {
      const helpText = `üìñ ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô LINE Bot\n\n` +
        `üîç ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:\n` +
        `‚Ä¢ ‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n` +
        `‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• ‡πÅ‡∏•‡∏∞‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n\n` +
        `üí° ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏≠‡∏∑‡πà‡∏ô‡πÜ:\n` +
        `‚Ä¢ "help" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠" - ‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô\n\n` +
        `üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n` +
        `‚Ä¢ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ\n` +
        `‚Ä¢ ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ`;
      await this.replyMessage(replyToken, helpText);
    } else {
      await this.replyMessage(replyToken, `üí¨ ‡∏Ñ‡∏∏‡∏ì‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ß‡πà‡∏≤: "${message}"\n\nüîç ‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"\nüí° ‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô`);
    }
  }

  private async handleFollow(replyToken: string): Promise<void> {
    const welcomeText = `üéâ ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•!\n\n` +
      `üîç ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÑ‡∏î‡πâ:\n` +
      `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô/‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•\n` +
      `‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å\n\n` +
      `üìã ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:\n` +
      `‡∏û‡∏¥‡∏°‡∏û‡πå "‡∏ä‡∏∑‡πà‡∏≠ ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n\n` +
      `üìù ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:\n` +
      `‚Ä¢ ‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡πÉ‡∏à‡∏î‡∏µ\n` +
      `‚Ä¢ ‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß ‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡∏£‡∏±‡∏Å‡∏î‡∏µ\n\n` +
      `üí° ‡∏û‡∏¥‡∏°‡∏û‡πå "help" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°`;
    await this.replyMessage(replyToken, welcomeText);
  }

  private async replyMessage(replyToken: string, text: string) {
    try {
      await axios.post(
        this.REPLY_ENDPOINT,
        {
          replyToken,
          messages: [{ type: 'text', text }],
        },
        {
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${this.CHANNEL_ACCESS_TOKEN}`,
          },
        },
      );
      this.logger.log('Reply sent to LINE successfully');
    } catch (error) {
      this.logger.error('Error sending reply to LINE:', (error as any)?.response?.data || (error instanceof Error ? error.message : 'Unknown error'));
    }
  }
}